"""
" Name: .vimrc
" Description: Configures the Vim file editor
" Created on: roughly 02.2011
" Last modified: 31.01.2020
" License: CC0
"""

set nocompatible
set t_Co=256
set encoding=utf-8

execute pathogen#infect()
syntax on

" Sets the color scheme that should look identically on most terminal emulators:
set background=dark
colorscheme vendetta

" Sets the GUI options for gvim:
set guifont=GohuFont\ 8

""" Airline-related: """
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

" unicode symbols for the powerline glyphs:
let g:airline_left_sep = '▶'
let g:airline_right_sep = '◀'
let g:airline_symbols.linenr = '␤'
let g:airline_symbols.branch = '⎇'
let g:airline_symbols.paste = 'PASTE'
let g:airline_symbols.whitespace = 'Ξ'

set laststatus=2

""" Ctrlp.vim-related: """
let g:ctrlp_map = "<c-p>"
let g:ctrlp_cmd = "CtrlP"
let g:ctrlp_working_path_mode = "ra"
let g:ctrlp_custom_ignore = {
  \ 'dir': '\v[\/].(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
let g:ctrlp_user_command = 'find %s -type f'
""" Ultisnips-related: """
let g:UltiSnipsSnippetsDir="~/.vim/UltiSnips"

let g:UltiSnipsExpandTrigger="<c-j>"

let g:UltiSnipsJumpForwardTrigger="<c-j>"
let g:UltiSnipsJumpBackwardTrigger="<c-k>"

" Makes :UltiSnipsEdit open a new split instead of switching buffers:
let g:UltiSnipsEditSplit="vertical"
""" End of Ultisnips-related stuff """

""" A.L.E.-related:
" Disables linting asynchronously when text changes:
let g:airline#extensions#ale#enabled = 1
let g:ale_lint_on_text_changed = "never"
let g:ale_lint_on_insert_leave = 0

let g:ale_lint_on_enter = 1
let g:cpp_options = "-std=c++17 -Wall -Wextra"
let g:ale_cpp_clang_options = g:cpp_options
let g:ale_cpp_clangd_options = g:cpp_options
let g:ale_cpp_clangcheck_options = g:cpp_options
let g:ale_cpp_clangtidy_options = g:cpp_options
let g:ale_cpp_clazy_options = g:cpp_options
let g:ale_cpp_gcc_options = g:cpp_options
"let g:ale_cpp_cppcheck_options = g:cpp_options

let g:ale_linters = {
\  "sh": ["shell", "shellcheck"],
\}

let g:ale_echo_msg_format = "[%linter%]: %s"
" Note: ALE mappings are placed in the keyboard mappings deeper down.
""" End of A.L.E.-related part.


""" Functions """
"Removes all trailing whitespace
function! TrimTrailingWhitespace()
  let b:save = winsaveview() " Saves the current view: cursor position, folds, etc.
  keeppatterns %s/\s\+$//e   " Trims the trailing whitespace via regexp.
  call winrestview(b:save)   " Restores the saved view.
endfunction
nnoremap <F7> :call TrimTrailingWhitespace() <cr>

" Switches between .hpp and .cpp files:
function! SwitchBetweenHeaderAndSourceFiles()
  if (expand("%:e") == "cpp")
    find %:t:r.hpp
  elseif (expand("%:e") == "hpp")
    find %:t:r.cpp
  endif
endfunction

function! OpenComplementingHeaderOrSourceFile()
  if expand("%:e") == "cpp"
    vsplit %:t:r.hpp
  elseif expand("%:e") == "hpp"
    vsplit %:t:r.cpp
  endif
endfunction

function! RunDeepestMakefile(...)
  let deepestMakefileRoot = substitute(system('sh "${HOME}/.vim/FindMakefile.sh"'), "\n*$", "", "")
  if deepestMakefileRoot ==# "/"
    echo "No Makefile found in current file's path"
  else
    let deepestMakefilePath = deepestMakefileRoot . "/Makefile"
    if filereadable(deepestMakefilePath)
      let &makeprg="make -C " . deepestMakefileRoot . " " . join(a:000)
      make
    else
      echo "Error: Makefile found at " . deepestMakefilePath . ", but it is inaccessible."
    endif
  endif
endfunction

" A function to delete old (90 days+) undofiles:
function! RmUndoFiles()
  let s:undos = split(globpath(&undodir, '*'), "\n")
  call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 90)')
  call map(s:undos, 'delete(v:val)')
endfunction

" Updates the "Last Modified: dd.mm.yyyy" part of header:
function! UpdateLastModified()
  if ! &modifiable
    echom "UpdateLastModified(): Buffer is not modifiable."
    return
  endif

  let b:bufmodified = getbufvar("%", "&mod")
  if ! b:bufmodified
    " Since the buffer has not been modified, there is no need to bump the modification date.
    return
  endif

  let b:pos = winsaveview()
  let b:begin_line = 0
  let b:end_line = 20
  let b:time_format = "%d.%m.%Y"
  let b:lastmodified_prefix = "Last modified:"

  " This prefix but converted to lowercase should be used when search() is called.
  " The reason for that is because search() assumes ignorecase+smartcase flags, so that
  " case-insensitive search will be performed when pattern is given in lowercase.
  " When substituting, the correct version of pattern will be used."
  let b:lastmodified_prefix_lowercase = tolower(b:lastmodified_prefix)

  execute b:begin_line
  let b:line_num = search(b:lastmodified_prefix_lowercase, "", b:end_line)
  if b:line_num > 0
    let b:existing_line = getline(b:line_num)
    let b:new_line = substitute(b:existing_line, b:lastmodified_prefix . ".*$", b:lastmodified_prefix . " " . strftime(b:time_format), "")
    if b:existing_line ==# b:new_line
      "echom "Last modified part is already up-to-date."
    else
      call setline(b:line_num, b:new_line)
    endif
  endif
  call winrestview(b:pos)
endfunction

""" End of Functions. """

" Expands tabs to spaces; keeps indent levels; aligns the braces together:
set expandtab
set autoindent
set smartindent
set number
set wrap
set ruler
set noautoread
set noerrorbells
set novisualbell
set nobackup
set nowritebackup
set noswapfile
set noshowmatch

" No unnecessary redraws in macros:
set lazyredraw

" Various non-bool options:
set history=512
set tabstop=2
set shiftwidth=2
set noshiftround
set scrolloff=7

" Allows backspacing over everything in insert mode:
set backspace=eol,start,indent

set tabpagemax=50
set colorcolumn=120
set matchtime=2  " Shows matching brackets for 0.2 seconds. No-effect until `match` is set.

" Adds triangle braces to the matched pairs' list. Useful for (X)HTML editing.
set matchpairs+=<:>

" Sets file mode to unix - dos files will be converted to unix mode:
set fileformat=unix

" Sets the format options so that the line comment will not be extended to the next line:
set formatoptions-=or

" Displays the tab character at all times:
set listchars=tab:▸\
set list

" Opens new splits to the right and to the bottom instead of Vim's default:
set splitbelow
set splitright

set dictionary=/home/simba/Tools/Wordlists/corncob_english_lowercase.txt

highlight ColorColumn ctermbg=DarkGray ctermfg=Yellow
                      \ guibg=DarkGray   guifg=Yellow
highlight Search cterm=underline ctermbg=NONE ctermfg=Yellow
                 \ gui=underline   guibg=NONE   guifg=Yellow
highlight MatchParen cterm=underline ctermbg=NONE ctermfg=Blue
                     \ gui=underline   guibg=NONE   guifg=Blue
" End of non-bool options.

" Search options:
"Makes search case-agnostic, unless capital letters are present in pattern string:
set ignorecase
set smartcase

" Highlights the search results as they are typed in:
set hlsearch
set incsearch

highlight NonText guifg=#4a4a59 ctermfg=DarkGray
highlight SpecialKey guifg=#4a4a59 ctermfg=DarkGray

" Infinite undo in the edited files - even after restarting Vim:
set undofile
set undodir=/home/simba/.vim/undodir
" A function to delete old (90 days+) undofiles:
function! RmUndoFiles()
  let s:undos = split(globpath(&undodir, '*'), "\n")
  call filter(s:undos, 'getftime(v:val) < localtime() - (60 * 60 * 24 * 90)')
  call map(s:undos, 'delete(v:val)')
endfunction

" Key mappings:
let mapleader="\<Space>"
let g:mapleader="\<Space>"
let maplocalleader="\\"
nnoremap ; :
set pastetoggle=<F5>
nnoremap <Leader>w :w<CR>
nnoremap <Leader><Leader> V
map j gj
map k gk
nnoremap H g^
vnoremap H ^
nnoremap L g$
vnoremap L $
vnoremap <silent> y y`]
vnoremap <silent> p p`]
nnoremap <silent> p p`]
nnoremap Q <nop>
map q: :q

" Easier reindenting of a visual selection: reselects a block after indent/outdent
vnoremap < <gv
vnoremap > >gv

" <F-n> commands' remappings:
nnoremap <F7> :call TrimTrailingWhitespace()<cr>
nnoremap <F10> :call RmUndoFiles()<cr>

""" Leader-commands """
" Commands for quick .vimrc editing - <leader>ev and <leader>sv
nnoremap <leader>ev :vsplit $MYVIMRC<cr>
nnoremap <leader>sv :source $MYVIMRC<cr>

" Commands for quick snippets editing - <leader>es and <leader>eS
nnoremap <leader>es :vsp $HOME/.vim/UltiSnips/<cr>
nnoremap <leader>eS :UltiSnipsEdit<cr>

" Commands for invoking make (make-compile and make-run):
nnoremap <leader>mc :call RunDeepestMakefile()<cr>
nnoremap <leader>mr :call RunDeepestMakefile("run")<cr>

" Commands for surrounding a word with various characters
nnoremap <leader>" viw<esc>a"<esc>hbi"<esc>lel
nnoremap <leader>' viw<esc>a'<esc>hbi'<esc>lel
nnoremap <leader>* viw<esc>a*<esc>hbi*<esc>lel
nnoremap <leader>% viw<esc>a%<esc>hbi%<esc>lel
nnoremap <leader>^ viw<esc>a$<esc>hbi^<esc>lel
nnoremap <leader>( viw<esc>a)<esc>hbi(<esc>lel
nnoremap <leader>) viw<esc>a)<esc>hbi(<esc>lel
nnoremap <leader>[ viw<esc>a]<esc>hbi[<esc>lel
nnoremap <leader>] viw<esc>a]<esc>hbi[<esc>lel
nnoremap <leader>{ viw<esc>a}<esc>hbi{<esc>lel
nnoremap <leader>} viw<esc>a}<esc>hbi{<esc>lel
nnoremap <leader>< viw<esc>a><esc>hbi<<esc>lel
nnoremap <leader>> viw<esc>a><esc>hbi<<esc>lel

nnoremap <leader>p :CtrlPTag<cr>

" Switch off search highlight temporarily:
nnoremap <silent> <leader>/ :nohlsearch<cr>

" Move a line of text using ALT+[jk]
nmap <M-j> mz:m+<cr>`z
nmap <M-k> mz:m-2<cr>`z
vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z

" Converts current word to UPCASE:
nnoremap <C-u> bveUe
inoremap <C-u> <esc>bveUea

" Checks the current folder for tags file, keeps going up one directory up until the root folder:
set tags=tags;/

" Unlearning
nnoremap <left> <nop>
nnoremap <right> <nop>
nnoremap <up> <nop>
nnoremap <down> <nop>
inoremap <left> <nop>
inoremap <right> <nop>
inoremap <up> <nop>
inoremap <down> <nop>

" Typo-s autofix:
iabbrev improt import
iabbrev sattic static
iabbrev mani main
iabbrev vodi void
iabbrev publci public
iabbrev teh the
" End of typo-s autofixes.

""" C-indenting options: """
setlocal cinoptions=N-s
""" End of C-indenting options. """

""" Override of the default starting window """
function! Start()
  " Creates a new unnamed buffer that will contain the contents of the splash screen:
  enew

  " Sets various option for this buffer - necessary since it should not act like a normal window:
  setlocal
    \ bufhidden=wipe
    \ buftype=nofile
    \ nobuflisted
    \ nocursorcolumn
    \ nocursorline
    \ nolist
    \ nonumber
    \ noswapfile
    \ norelativenumber

  " Sets the message displayed on a splash screen:
  call append('$', "Succubbus Vim")

  " Sets the buffer to readonly so that it may be used as a splash screen:
  setlocal nomodifiable nomodified

  " Ensures that a new buffer is opened when the user switches to the insert mode:
  nnoremap <buffer><silent> a :enew <bar> startinsert<cr>
  nnoremap <buffer><silent> e :enew<cr>
  nnoremap <buffer><silent> i :enew <bar> startinsert<cr>
  nnoremap <buffer><silent> o :enew <bar> startinsert<cr>
endfun

""" ALE-related mappings: """
nnoremap <leader>an :ALENext<cr>
nnoremap <leader>ap :ALEPrevious<cr>
nnoremap <leader>ad :ALEDetail<cr>
nnoremap <leader>at :ALEToggleBuffer<cr>
nnoremap <leader>agd :ALEGoToDefinition<cr>

""" End of ALE-related mappings. """


""" Autocommands: """
"augroup vimSplashScreen
"  autocmd!
"  if argc() == 0
"    "autocmd VimEnter * call Start()
"  endif
"augroup END

augroup anyfile
  autocmd!
  " For any file type, jumps to the position edited the last time:
  autocmd BufReadPost *
    \ if line("'\"") > 0 && line("'\"") <= line("$") |
    \ exe "normal g`\"" |
    \ endif

  """ Makes the text copied from Vim stay in the clipboard
  "   even after exiting Vim: """
  autocmd VimLeave * call system("xsel -ib", getreg('+'))
augroup END

augroup highlighting
  autocmd!
  highlight ExtraWhitespace ctermbg=Red ctermfg=Red guibg=Red guifg=Red
  match ExtraWhitespace /\s\+$/
  autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
  autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
  autocmd InsertLeave * match ExtraWhitespace /\s\+$/
  autocmd BufWinLeave * call clearmatches()
augroup end

augroup filetype_c
  autocmd!
  autocmd FileType c nnoremap <buffer> <localleader>c I//<space><esc>
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_conky
  autocmd!
  " Makes vim treat and highlight any *.conky file as if it were Lua code (since it mostly is!):
  autocmd BufNewFile,BufRead *.conky set filetype=lua
augroup END

augroup filetype_cpp
  autocmd!
  autocmd FileType cpp nnoremap <buffer> <localleader>c I//<space><esc>

  " Maps F3 key to trigger toggling between source (.cc) and header (.h) files
  " and F4 key to open complementing file in a vertical split:
  nnoremap <F3> :call SwitchBetweenHeaderAndSourceFiles()<cr>
  inoremap <F3> <esc>:call SwitchBetweenHeaderAndSourceFiles()<cr>
  nnoremap <F4> :call OpenComplementingHeaderOrSourceFile()<cr>
  inoremap <F4> <esc>:call OpenComplementingHeaderOrSourceFile()<cr>

  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_gitcommit
  autocmd!
  autocmd FileType gitcommit set cc=73
  autocmd FileType gitcommit set tw=72
  autocmd FileType gitcommit nnoremap <buffer> <localleader>c I#<space><esc>
augroup END

augroup filetype_java
  autocmd!
  autocmd FileType java nnoremap <buffer> <localleader>c I//<space><esc>
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_make
  autocmd!
  autocmd FileType make setlocal noexpandtab
  autocmd FileType make nnoremap <buffer> <localleader>c I#<space><esc>
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_python
  autocmd!
  autocmd FileType python nnoremap <buffer> <localleader>c I#<space><esc>
  autocmd FileType python inoremap # X<C-h>#
  autocmd FileType python setlocal shiftwidth=4
  autocmd FileType python setlocal softtabstop=4
  autocmd FileType python setlocal expandtab
  autocmd FileType python setlocal colorcolumn=80
  autocmd FileType python setlocal cinwords=if,elif,else,for,while,try,except,finally,def,class

  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_sh
  autocmd!
  autocmd FileType sh nnoremap <buffer> <localleader>c I#<space><esc>
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_shrc
  autocmd!
  autocmd BufEnter *.shrc :setlocal filetype=sh
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_tex
  autocmd!
  autocmd FileType tex nnoremap <buffer> <F5> :!pdflatex %<cr>
  autocmd BufWritePre * call UpdateLastModified()
augroup END

augroup filetype_vim
  autocmd!
  autocmd FileType vim nnoremap <buffer> <localleader>c I"<space><esc>
  autocmd BufWritePre * call UpdateLastModified()
augroup END
""" End of Autocommands. """
