#!/usr/bin/env bash

# Name:          InitTmuxSessions
# Description:   Initializes the common tmux's sockets (F10, F12) with predefined sessions.
# Options:       -k|--kill-sessions:
#                    Determines whether killing old sessions is allowed when trying to create a new session.
#                    If set, old sessions will be killed if their name match new session's name.
#                    If unset, old sessions will be preserved - the script terminates on first detected match.
# Created on:    24-06-2019
# Last modified: 24-06-2019
# Author:        Adam GraliÅ„ski (adam@gralin.ski)
# License:       MIT

################################################################################
# Creates a new tmux session of requested name. Terminates the entire script on error.
function create_session() {
  if [ "${#}" -ne 1 ]; then
    >&2 printf "Critical error: create_session called with %d argument(s) [1 required].\n" "${#}"
    >&2 printf "Please fix the script.\nAborting.\n"
    exit 101
  fi
  if tmux -L "${TARGET_SOCKET}" has-session -t "${1}" 2>/dev/null; then
    if [ -n "${KILL_SESSIONS}" ]; then
      >&2 printf "Warning: Killing already existing session \"%s\".\n" "${1}"
      tmux -L "${TARGET_SOCKET}" kill-session -t "${1}"
    else
      >&2 printf "Error: session \"%s\" already exists, but killing sessions is not allowed. Aborting.\n" "${1}"
      exit 1
    fi
  fi

  tmux -L "${TARGET_SOCKET}" new-session -d -s "${1}"
}

# Prints error message and exits with code 100 if ${TARGET_SOCKET} is not a socket file.
function ensure_target_socket_exists() {
  if [ ! -S "${TMUX_TMPDIR}/tmux-1000/${TARGET_SOCKET}" ]; then
    >&2 printf "Critical error: %s socket not found.\n" "${TARGET_SOCKET}"
    exit 100
  fi
}
################################################################################

while [ "${#}" -gt 0 ]; do
  case "${1}" in
    -k|--kill-sessions)
      export KILL_SESSIONS=1
    ;;
  esac
  shift
done


TARGET_SOCKET=F10
ensure_target_socket_exists
# Creates a default session for own opensource/github projects:
SESSION_OPENSOURCE="Opensource"
AGRAL_DIR="${HOME}/Repos/agral"
cd "${AGRAL_DIR}"
create_session "${SESSION_OPENSOURCE}"
# First window: default agral view.
tmux -L "${TARGET_SOCKET}" rename-window -t "${SESSION_OPENSOURCE}:1" "agral"

SESSION_DOTFILES="Dotfiles"
DOTFILES_DIR="${HOME}/Repos/agral/Dotfiles"
cd "${DOTFILES_DIR}"
create_session "${SESSION_DOTFILES}"
# First window: The contents of Dotfiles repository:
tmux -L "${TARGET_SOCKET}" rename-window -t "${SESSION_DOTFILES}:1" "Dotfiles"


TARGET_SOCKET=F12
ensure_target_socket_exists
SESSION_MUSIC="Music"
cd "${HOME}/Audio/Music/"
create_session "${SESSION_MUSIC}"
# First window: ncmpcpp controlling the main mpd instance:
tmux -L "${TARGET_SOCKET}" rename-window -t "${SESSION_MUSIC}:1" "Music"
tmux -L "${TARGET_SOCKET}" send-keys -t "${SESSION_MUSIC}:1" "ncmpcpp -c ${HOME}/.ncmpcpp/config" Enter

# Second window: ncmpcpp controlling the podcasts mpd instance:
tmux -L "${TARGET_SOCKET}" new-window -t "${SESSION_MUSIC}:2" -n "Podcasts"
tmux -L "${TARGET_SOCKET}" send-keys -t "${SESSION_MUSIC}:2" "ncmpcpp -c ${HOME}/.ncmpcpp/podcast_config" Enter

# Third window: ncmpcpp controlling the incoming mpd instance:
tmux -L "${TARGET_SOCKET}" new-window -t "${SESSION_MUSIC}:3" -n "Incoming"
tmux -L "${TARGET_SOCKET}" send-keys -t "${SESSION_MUSIC}:3" "ncmpcpp -c ${HOME}/.ncmpcpp/incoming_config" Enter

# Fourth window: downloading the streamed content:
cd "${HOME}/IN/music"
tmux -L "${TARGET_SOCKET}" new-window -t "${SESSION_MUSIC}:4" -n "Ripping"

# Focuses on the first window:
tmux -L "${TARGET_SOCKET}" select-window -t "${SESSION_MUSIC}:1"


printf "Successfully completed.\n"
