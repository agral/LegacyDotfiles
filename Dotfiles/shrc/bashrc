# Applies the contents of this file only for interactive sessions:
[[ $- != *i* ]] && return

# Does not put duplicate lines or lines starting with space in the history:
HISTCONTROL=ignoreboth:erasedups

# Appends to the history file instead of overwriting it:
shopt -s histappend

# *Remembers* the history:
HISTSIZE=100000
HISTFILESIZE=200000

# Checks the window size after each command and automatically updates the values of LINES and COLUMNS:
shopt -s checkwinsize

function extract_git_branch()
{
  git branch 2>/dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'
}

function make_bash_prompt()
{
  local EXITCODE="$?"                 # This needs to be first.

  local colorNONE="\[\033[0m\]"       # resets color to terminal's FG color.
  local colorK="\[\033[0;30m\]"       # regular black
  local colorR="\[\033[0;31m\]"       # regular red
  local colorG="\[\033[0;32m\]"       # regular green
  local colorY="\[\033[0;33m\]"       # regular yellow
  local colorB="\[\033[0;34m\]"       # regular blue
  local colorM="\[\033[0;35m\]"       # regular magenta
  local colorC="\[\033[0;36m\]"       # regular cyan
  local colorW="\[\033[0;37m\]"       # regular white
  local colorKEM="\[\033[1;30m\]"     # bold black
  local colorREM="\[\033[1;31m\]"     # bold red
  local colorGEM="\[\033[1;32m\]"     # bold green
  local colorYEM="\[\033[1;33m\]"     # bold yellow
  local colorBEM="\[\033[1;34m\]"     # bold blue
  local colorMEM="\[\033[1;35m\]"     # bold magenta
  local colorCEM="\[\033[1;36m\]"     # bold cyan
  local colorWEM="\[\033[1;37m\]"     # bold white
  local bgcolorK="\[\033[40m\]"       # background black
  local bgcolorR="\[\033[41m\]"       # background red
  local bgcolorG="\[\033[42m\]"       # background green
  local bgcolorY="\[\033[43m\]"       # background yellow
  local bgcolorB="\[\033[44m\]"       # background blue
  local bgcolorM="\[\033[45m\]"       # background magenta
  local bgcolorC="\[\033[46m\]"       # background cyan
  local bgcolorW="\[\033[47m\]"       # background white

  local usercolor=$colorG    # normal user's color - green.
  if [ $UID -eq "0" ]; then
    usercolor=$colorR        # superuser's color - red.
  fi
  local exitcolor=$colorG    # normal exit color - green.
  if [ "$EXITCODE" -ne "0" ]; then
    exitcolor="$colorY"      # abnormal exit color - yellow.
  fi
  local gitbr="$(extract_git_branch)"
  local prompt_gitbr_part=""
  if [ "${gitbr}" ]; then
    printf -v prompt_gitbr_part " on ${colorYEM}%s${colorNONE}" "${gitbr}"
  fi
  PS1="${colorNONE}[${exitcolor}$EXITCODE${colorNONE}] [${colorM}\t${colorNONE}] ${usercolor}\u${colorNONE} in ${colorB}\w${colorNONE}${prompt_gitbr_part}\n${usercolor}\$${colorNONE} "
}

PROMPT_COMMAND=make_bash_prompt

# Exports global variables:
if [ -f "${HOME}/.config/shrc/global_variables.shrc" ]; then
  . "${HOME}/.config/shrc/global_variables.shrc"
fi

# Sources the common shell aliases:
if [ -f ~/.config/shrc/common.shrc ]; then
    . ~/.config/shrc/common.shrc
fi

# Sources the aliases for easier control of the package manager:
if [ -f ~/.config/shrc/package_manager.shrc ]; then
  . ~/.config/shrc/package_manager.shrc
fi

# Sources the machine-specific aliases:
if [ -f ~/.config/shrc/machine_specific.shrc ]; then
  . ~/.config/shrc/machine_specific.shrc
fi
